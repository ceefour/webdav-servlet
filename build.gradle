/*
 * Copyright 1999,2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

archivesBaseName = 'webdav-servlet'
group = 'net.sf.webdav-servlet'
version = '2.0.2.JACKGENE-SNAPSHOT'

sourceCompatibility = 1.5
targetCompatibility = 1.5

repositories {
  if (rootProject.hasProperty('repositories.MAVEN_CENTRAL_MIRROR_URL')) {
    maven {
      url getProperty('repositories.MAVEN_CENTRAL_MIRROR_URL')
    }
  } else {
    mavenCentral()
  }
}

dependencies {
    compile "javax.servlet:servlet-api:2.4"

    compile "org.slf4j:slf4j-api:1.4.3"
    testCompile "junit:junit:4.4"
    testCompile "org.jmock:jmock:2.4.0"
    testCompile "org.springframework:spring-webmvc:2.5.2"
    testCompile "org.springframework:spring-mock:2.0.7"
    testRuntime "org.slf4j:slf4j-log4j12:1.4.3"
}

test {
  include '**/*Test.class'
  exclude '**/net/sf/webdav/testutil/**/*Test.class'  
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}
artifacts {
  archives sourcesJar
  archives javadocJar
}

if (rootProject.hasProperty('uploadArchives.my.edu.clhs.baseRepositoryUrl')) {
  uploadArchives {
    ext.BASE_REPOSITORY_URL = getProperty('uploadArchives.my.edu.clhs.baseRepositoryUrl')
    repositories {
      mavenDeployer {
        repository(url: "${BASE_REPOSITORY_URL}/release")
        snapshotRepository(url: "${BASE_REPOSITORY_URL}/snapshot")
        pom.whenConfigured { pom ->
          pom.dependencies.removeAll { dep ->
            dep.groupId == 'javax.servlet' && dep.artifactId == 'servlet-api'
          }
        }
      }
    }
  }
}

task wrapper(type: Wrapper)
